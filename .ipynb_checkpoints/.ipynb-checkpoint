{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# WeatherPy\n",
    "----\n",
    "\n",
    "#### Note\n",
    "* Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import time\n",
    "from scipy.stats import linregress\n",
    "\n",
    "# Import API key\n",
    "from api_keys import weather_api_key\n",
    "\n",
    "# Incorporated citipy to determine city based on latitude and longitude\n",
    "from citipy import citipy\n",
    "#import openweathermapy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Output File (CSV)\n",
    "output_datafile = \"outputdata/cities.csv\"\n",
    "\n",
    "# Range of latitudes and longitudes\n",
    "lat_range = (-90, 90)\n",
    "lng_range = (-180, 180)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate Cities List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 593 cities found from random geo-coordinates.\n"
     ]
    }
   ],
   "source": [
    "lat_lngs = []\n",
    "cities = []\n",
    "\n",
    "# Create a set of random lat and lng combinations\n",
    "lats = np.random.uniform(low=lat_range[0], high=lat_range[1], size=1500)\n",
    "lngs = np.random.uniform(low=lng_range[0], high=lng_range[1], size=1500)\n",
    "lat_lngs = zip(lats, lngs)\n",
    "\n",
    "# Identify nearest city by passing lat and lng combination\n",
    "for lat_lng in lat_lngs:\n",
    "    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name\n",
    "    \n",
    "    # append unique city to the list\n",
    "    if city not in cities:\n",
    "        cities.append(city)\n",
    "\n",
    "# Print the city count to confirm sufficient count\n",
    "print(\"There are {} cities found from random geo-coordinates.\".format(len(cities)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create a set of random lat and lng combinations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "633"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List for holding lat_lngs and cities\n",
    "lat_lngs = []\n",
    "cities = []\n",
    "\n",
    "# Create a set of random lat and lng combinations\n",
    "lats = np.random.uniform(low=-90.000, high=90.000, size=1500)\n",
    "lngs = np.random.uniform(low=-180.000, high=180.000, size=1500)\n",
    "lat_lngs = zip(lats, lngs)\n",
    "# Identify nearest city for each lat, lng combination\n",
    "\n",
    "for lat_lng in lat_lngs:\n",
    "    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name\n",
    "    \n",
    "    # If the city is unique, then add it to a our cities list\n",
    "    if city not in cities:\n",
    "        cities.append(city)\n",
    "\n",
    "# Print the city count to confirm sufficient count\n",
    "len(cities)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perform API Calls\n",
    "* Perform a weather check on each city using a series of successive API calls.\n",
    "* Include a print log of each city as it'sbeing processed (with the city number and city name).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Beginning Data Retrieval\n",
      "-----------------------------------\n",
      "Processing Record   1 of set 633 | Pathalgaon \n",
      "Processing Record   2 of set 633 | Savannah Bight \n",
      "Processing Record   3 of set 633 | Avarua \n",
      "Processing Record   4 of set 633 | Puerto Ayora \n",
      "Processing Record   5 of set 633 | Punta Arenas \n",
      "Processing Record   6 of set 633 | Fortuna \n",
      "Processing Record   7 of set 633 | George Town \n",
      "Processing Record   8 of set 633 | Leh \n",
      "Processing Record   9 of set 633 | Dukat \n",
      "Processing Record  10 of set 633 | Luwuk \n",
      "Processing Record  11 of set 633 | Ust-Tsilma \n",
      "Processing Record  12 of set 633 | Okhotsk \n",
      "Processing Record  13 of set 633 | Mayo \n",
      "Processing Record  14 of set 633 | Jamestown \n",
      "Processing Record  15 of set 633 | Ribeira Grande \n",
      "Processing Record  16 of set 633 | Ushuaia \n",
      "Processing Record  17 of set 633 | La Ronge \n",
      "Processing Record  18 of set 633 | Petropavlovsk-Kamchatskiy \n",
      "Processing Record  19 of set 633 | Castro \n",
      "Processing Record  20 of set 633 | Kedrovyy \n",
      "Processing Record  21 of set 633 | Dehlorān \n",
      "Processing Record  22 of set 633 | Atuona \n",
      "Processing Record  23 of set 633 | Bethel \n",
      "(Total 1 cities out of 633 not found...) \n",
      "Processing Record  24 of set 633 | Faanui \n",
      "Processing Record  25 of set 633 | Quatre Cocos \n",
      "Processing Record  26 of set 633 | Dīg \n",
      "Processing Record  27 of set 633 | Dyurtyuli \n",
      "Processing Record  28 of set 633 | Riyadh \n",
      "Processing Record  29 of set 633 | Cape Town \n",
      "Processing Record  30 of set 633 | Rikitea \n",
      "Processing Record  31 of set 633 | Vaini \n",
      "Processing Record  32 of set 633 | Bubaque \n",
      "Processing Record  33 of set 633 | Cartagena \n",
      "Processing Record  34 of set 633 | Duluth \n",
      "Processing Record  35 of set 633 | El Real de Santa Maria \n",
      "Processing Record  36 of set 633 | Inzhavino \n",
      "Processing Record  37 of set 633 | Tuktoyaktuk \n",
      "Processing Record  38 of set 633 | Nanortalik \n",
      "Processing Record  39 of set 633 | Esso \n",
      "Processing Record  40 of set 633 | Iracoubo \n",
      "Processing Record  41 of set 633 | Soreang \n",
      "Processing Record  42 of set 633 | Bilma \n",
      "Processing Record  43 of set 633 | Yar-Sale \n",
      "Processing Record  44 of set 633 | San Patricio \n",
      "Processing Record  45 of set 633 | Kapaa \n",
      "Processing Record  46 of set 633 | Khatanga \n",
      "(Total 2 cities out of 633 not found...) \n",
      "Processing Record  47 of set 633 | Ancud \n",
      "Processing Record  48 of set 633 | Coquimbo \n",
      "Processing Record  49 of set 633 | Yellowknife \n",
      "Processing Record  50 of set 633 | Grand Gaube \n",
      "Processing Record  51 of set 633 | Katsuura \n",
      "Processing Record  52 of set 633 | Namatanai \n",
      "Processing Record  53 of set 633 | Albany \n",
      "(Total 3 cities out of 633 not found...) \n",
      "Processing Record  54 of set 633 | Marsá Maţrūḩ \n",
      "Processing Record  55 of set 633 | Cherskiy \n",
      "Processing Record  56 of set 633 | Hegang \n",
      "(Total 4 cities out of 633 not found...) \n",
      "Processing Record  57 of set 633 | Tauranga \n",
      "Processing Record  58 of set 633 | Mataura \n",
      "Processing Record  59 of set 633 | Ponta do Sol \n",
      "Processing Record  60 of set 633 | Half Moon Bay \n",
      "Processing Record  61 of set 633 | Saldanha \n",
      "Processing Record  62 of set 633 | Busselton \n",
      "Processing Record  63 of set 633 | Esperance \n",
      "Processing Record  64 of set 633 | Coburg \n",
      "Processing Record  65 of set 633 | Bredasdorp \n",
      "Processing Record  66 of set 633 | Qaanaaq \n",
      "Processing Record  67 of set 633 | Luang Prabang \n",
      "Processing Record  68 of set 633 | Barrow \n",
      "Processing Record  69 of set 633 | Anadyr \n",
      "Processing Record  70 of set 633 | Palani \n",
      "Processing Record  71 of set 633 | Saint Paul Harbor \n",
      "Processing Record  72 of set 633 | Kavieng \n",
      "Processing Record  73 of set 633 | Methóni \n",
      "Processing Record  74 of set 633 | Auburn \n",
      "Processing Record  75 of set 633 | Inírida \n",
      "Processing Record  76 of set 633 | Port Alfred \n",
      "(Total 5 cities out of 633 not found...) \n",
      "Processing Record  77 of set 633 | Thompson \n",
      "Processing Record  78 of set 633 | Monrovia \n",
      "Processing Record  79 of set 633 | Butaritari \n",
      "Processing Record  80 of set 633 | East London \n",
      "Processing Record  81 of set 633 | Oderzo \n",
      "Processing Record  82 of set 633 | Sørland \n",
      "Processing Record  83 of set 633 | Pokhara \n",
      "Processing Record  84 of set 633 | Nagato \n",
      "Processing Record  85 of set 633 | Coyhaique \n",
      "Processing Record  86 of set 633 | Bluff \n",
      "Processing Record  87 of set 633 | Tazovsky \n",
      "Processing Record  88 of set 633 | Vila Franca do Campo \n",
      "Processing Record  89 of set 633 | Chara \n",
      "(Total 6 cities out of 633 not found...) \n",
      "Processing Record  90 of set 633 | Faya \n",
      "(Total 7 cities out of 633 not found...) \n",
      "Processing Record  91 of set 633 | Ponta Delgada \n",
      "Processing Record  92 of set 633 | Cabo San Lucas \n",
      "Processing Record  93 of set 633 | Saint-Philippe \n",
      "Processing Record  94 of set 633 | Huarmey \n",
      "Processing Record  95 of set 633 | Chui \n",
      "Processing Record  96 of set 633 | Narsaq \n",
      "Processing Record  97 of set 633 | Tabuk \n",
      "Processing Record  98 of set 633 | Vostok \n",
      "(Total 8 cities out of 633 not found...) \n",
      "Processing Record  99 of set 633 | Norden \n",
      "Processing Record 100 of set 633 | Zhigansk \n",
      "Processing Record 101 of set 633 | Pevek \n",
      "Processing Record 102 of set 633 | Sabha \n",
      "Processing Record 103 of set 633 | Te Anau \n",
      "Processing Record 104 of set 633 | Saint-François \n",
      "Processing Record 105 of set 633 | Kudahuvadhoo \n",
      "(Total 9 cities out of 633 not found...) \n",
      "Processing Record 106 of set 633 | Kaitangata \n",
      "Processing Record 107 of set 633 | Suntar \n",
      "Processing Record 108 of set 633 | Yenagoa \n",
      "Processing Record 109 of set 633 | Ladário \n",
      "Processing Record 110 of set 633 | Santa Maria \n",
      "Processing Record 111 of set 633 | Hobart \n",
      "Processing Record 112 of set 633 | Port Elizabeth \n",
      "Processing Record 113 of set 633 | Encarnación \n",
      "Processing Record 114 of set 633 | Kahului \n",
      "Processing Record 115 of set 633 | New Norfolk \n",
      "Processing Record 116 of set 633 | Mar del Plata \n",
      "Processing Record 117 of set 633 | Erbil \n",
      "(Total 10 cities out of 633 not found...) \n",
      "Processing Record 118 of set 633 | Houston \n",
      "(Total 11 cities out of 633 not found...) \n",
      "Processing Record 119 of set 633 | Kangaatsiaq \n",
      "Processing Record 120 of set 633 | Itoman \n",
      "Processing Record 121 of set 633 | Harper \n",
      "(Total 12 cities out of 633 not found...) \n",
      "Processing Record 122 of set 633 | Cidreira \n",
      "Processing Record 123 of set 633 | Fairbanks \n",
      "Processing Record 124 of set 633 | Kloulklubed \n",
      "Processing Record 125 of set 633 | Zheleznodorozhnyy \n",
      "Processing Record 126 of set 633 | Visby \n",
      "Processing Record 127 of set 633 | Zonguldak \n",
      "Processing Record 128 of set 633 | Umluj \n",
      "Processing Record 129 of set 633 | Hermanus \n",
      "(Total 13 cities out of 633 not found...) \n",
      "Processing Record 130 of set 633 | Dalarik \n",
      "Processing Record 131 of set 633 | Chokurdakh \n",
      "Processing Record 132 of set 633 | San Isidro \n",
      "(Total 14 cities out of 633 not found...) \n",
      "Processing Record 133 of set 633 | Hithadhoo \n",
      "Processing Record 134 of set 633 | Bambous Virieux \n",
      "Processing Record 135 of set 633 | San Pablo City \n",
      "Processing Record 136 of set 633 | Lavrentiya \n",
      "Processing Record 137 of set 633 | Berlevåg \n",
      "Processing Record 138 of set 633 | Nikolskoye \n",
      "Processing Record 139 of set 633 | Motril \n",
      "Processing Record 140 of set 633 | Tourlaville \n",
      "Processing Record 141 of set 633 | Karoi \n",
      "Processing Record 142 of set 633 | Muzhi \n",
      "Processing Record 143 of set 633 | Itum-Kale \n",
      "Processing Record 144 of set 633 | Lewiston \n",
      "Processing Record 145 of set 633 | San Policarpo \n",
      "Processing Record 146 of set 633 | Saint Anthony \n",
      "Processing Record 147 of set 633 | Lima \n",
      "(Total 15 cities out of 633 not found...) \n",
      "Processing Record 148 of set 633 | Berdigestyakh \n",
      "Processing Record 149 of set 633 | Necochea \n",
      "Processing Record 150 of set 633 | Hastings \n",
      "Processing Record 151 of set 633 | Okha \n",
      "Processing Record 152 of set 633 | Kitale \n",
      "Processing Record 153 of set 633 | Airai \n",
      "Processing Record 154 of set 633 | Fereydūnkenār \n",
      "Processing Record 155 of set 633 | Ust'-Barguzin \n",
      "Processing Record 156 of set 633 | Sohag \n",
      "Processing Record 157 of set 633 | Rocha \n",
      "Processing Record 158 of set 633 | Pimenteiras \n",
      "Processing Record 159 of set 633 | Karratha \n",
      "Processing Record 160 of set 633 | Norman Wells \n",
      "Processing Record 161 of set 633 | Labuhan \n",
      "Processing Record 162 of set 633 | Saskylakh \n",
      "Processing Record 163 of set 633 | Khani \n",
      "Processing Record 164 of set 633 | Marzuq \n",
      "Processing Record 165 of set 633 | Meulaboh \n",
      "Processing Record 166 of set 633 | Ewo \n",
      "Processing Record 167 of set 633 | ‘Ewa Beach \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing Record 168 of set 633 | Mitú \n",
      "Processing Record 169 of set 633 | Hilo \n",
      "Processing Record 170 of set 633 | Arlit \n",
      "Processing Record 171 of set 633 | Antalaha \n",
      "Processing Record 172 of set 633 | Morondava \n",
      "Processing Record 173 of set 633 | Poronaysk \n",
      "Processing Record 174 of set 633 | Khanbari \n",
      "Processing Record 175 of set 633 | Kyra \n",
      "Processing Record 176 of set 633 | Mozarlândia \n",
      "Processing Record 177 of set 633 | Klaksvík \n",
      "Processing Record 178 of set 633 | China \n",
      "Processing Record 179 of set 633 | Sirari \n",
      "(Total 16 cities out of 633 not found...) \n",
      "(Total 17 cities out of 633 not found...) \n",
      "Processing Record 180 of set 633 | Makkah al Mukarramah \n",
      "Processing Record 181 of set 633 | Atar \n",
      "Processing Record 182 of set 633 | Santa Fe \n",
      "Processing Record 183 of set 633 | Sawākin \n",
      "Processing Record 184 of set 633 | Dikson \n",
      "Processing Record 185 of set 633 | Yuci \n",
      "Processing Record 186 of set 633 | Sambava \n",
      "Processing Record 187 of set 633 | Saint-Pierre \n",
      "Processing Record 188 of set 633 | Kurchum \n",
      "Processing Record 189 of set 633 | Lompoc \n",
      "(Total 18 cities out of 633 not found...) \n",
      "Processing Record 190 of set 633 | Sitka \n",
      "Processing Record 191 of set 633 | Ambilobe \n",
      "Processing Record 192 of set 633 | Jumla \n",
      "Processing Record 193 of set 633 | Umm Kaddadah \n",
      "(Total 19 cities out of 633 not found...) \n",
      "Processing Record 194 of set 633 | Faro \n",
      "Processing Record 195 of set 633 | Hoquiam \n",
      "Processing Record 196 of set 633 | Elk River \n",
      "Processing Record 197 of set 633 | Pitrufquén \n",
      "(Total 20 cities out of 633 not found...) \n",
      "Processing Record 198 of set 633 | Uiraúna \n",
      "Processing Record 199 of set 633 | Zeya \n",
      "Processing Record 200 of set 633 | Morant Bay \n",
      "Processing Record 201 of set 633 | Mariehamn \n",
      "Processing Record 202 of set 633 | Taoudenni \n",
      "Processing Record 203 of set 633 | Barra do Garças \n",
      "Processing Record 204 of set 633 | Ilulissat \n",
      "(Total 21 cities out of 633 not found...) \n",
      "Processing Record 205 of set 633 | Arraial do Cabo \n",
      "Processing Record 206 of set 633 | Kautokeino \n",
      "Processing Record 207 of set 633 | Tuatapere \n",
      "Processing Record 208 of set 633 | Rafrāf \n",
      "Processing Record 209 of set 633 | Dunedin \n",
      "Processing Record 210 of set 633 | Longyearbyen \n",
      "(Total 22 cities out of 633 not found...) \n",
      "Processing Record 211 of set 633 | Koungou \n",
      "Processing Record 212 of set 633 | Kaeo \n",
      "Processing Record 213 of set 633 | Westerland \n",
      "(Total 23 cities out of 633 not found...) \n",
      "(Total 24 cities out of 633 not found...) \n",
      "Processing Record 214 of set 633 | Qaqortoq \n",
      "Processing Record 215 of set 633 | Andenes \n",
      "Processing Record 216 of set 633 | Willowmore \n",
      "Processing Record 217 of set 633 | Oodweyne \n",
      "Processing Record 218 of set 633 | Manokwari \n",
      "(Total 25 cities out of 633 not found...) \n",
      "Processing Record 219 of set 633 | Rāwah \n",
      "Processing Record 220 of set 633 | Northport \n",
      "Processing Record 221 of set 633 | Bull Savanna \n",
      "Processing Record 222 of set 633 | Nemuro \n",
      "Processing Record 223 of set 633 | Torbay \n",
      "Processing Record 224 of set 633 | Mezen' \n",
      "Processing Record 225 of set 633 | Fare \n",
      "Processing Record 226 of set 633 | Guerrero Negro \n",
      "Processing Record 227 of set 633 | Havre-St-Pierre \n",
      "Processing Record 228 of set 633 | Verāval \n",
      "Processing Record 229 of set 633 | Saint George \n",
      "(Total 26 cities out of 633 not found...) \n",
      "Processing Record 230 of set 633 | Arkhara \n",
      "Processing Record 231 of set 633 | Portland \n",
      "Processing Record 232 of set 633 | Artyom \n",
      "Processing Record 233 of set 633 | Mercedes \n",
      "Processing Record 234 of set 633 | Vao \n",
      "Processing Record 235 of set 633 | Peniche \n",
      "Processing Record 236 of set 633 | San Cristobal \n",
      "Processing Record 237 of set 633 | Havelock \n",
      "Processing Record 238 of set 633 | Maniitsoq \n",
      "Processing Record 239 of set 633 | Aras \n",
      "(Total 27 cities out of 633 not found...) \n",
      "(Total 28 cities out of 633 not found...) \n",
      "Processing Record 240 of set 633 | Sarandi \n",
      "Processing Record 241 of set 633 | Mpika \n",
      "Processing Record 242 of set 633 | Lata \n",
      "Processing Record 243 of set 633 | Quimper \n",
      "(Total 29 cities out of 633 not found...) \n",
      "Processing Record 244 of set 633 | Kruisfontein \n",
      "(Total 30 cities out of 633 not found...) \n",
      "Processing Record 245 of set 633 | Hambantota \n",
      "Processing Record 246 of set 633 | Zliten \n",
      "Processing Record 247 of set 633 | Ile-Ife \n",
      "Processing Record 248 of set 633 | Provideniya \n",
      "Processing Record 249 of set 633 | Puro \n",
      "Processing Record 250 of set 633 | Tiksi \n",
      "Processing Record 251 of set 633 | Souillac \n",
      "Processing Record 252 of set 633 | Gimli \n",
      "Processing Record 253 of set 633 | Muromtsevo \n",
      "(Total 31 cities out of 633 not found...) \n",
      "Processing Record 254 of set 633 | Freeport \n",
      "(Total 32 cities out of 633 not found...) \n",
      "Processing Record 255 of set 633 | Mossamedes \n",
      "Processing Record 256 of set 633 | Olafsvik \n",
      "Processing Record 257 of set 633 | Kiama \n",
      "Processing Record 258 of set 633 | Severo-Kuril'sk \n",
      "Processing Record 259 of set 633 | Valparaíso \n",
      "Processing Record 260 of set 633 | Yokadouma \n",
      "Processing Record 261 of set 633 | Agadez \n",
      "Processing Record 262 of set 633 | Ulladulla \n",
      "Processing Record 263 of set 633 | Lorengau \n",
      "Processing Record 264 of set 633 | Bontang \n",
      "Processing Record 265 of set 633 | Vaitape \n",
      "(Total 33 cities out of 633 not found...) \n",
      "Processing Record 266 of set 633 | Beringovskiy \n",
      "Processing Record 267 of set 633 | Māngrol \n",
      "Processing Record 268 of set 633 | Oistins \n",
      "Processing Record 269 of set 633 | Abū Zabad \n",
      "Processing Record 270 of set 633 | Jaltepec \n",
      "Processing Record 271 of set 633 | Melivoia \n",
      "Processing Record 272 of set 633 | Graham \n",
      "Processing Record 273 of set 633 | Colares \n",
      "Processing Record 274 of set 633 | Bathsheba \n",
      "Processing Record 275 of set 633 | Sobolevo \n",
      "Processing Record 276 of set 633 | Mahébourg \n",
      "Processing Record 277 of set 633 | Isil'kul' \n",
      "Processing Record 278 of set 633 | Constitución \n",
      "(Total 34 cities out of 633 not found...) \n",
      "Processing Record 279 of set 633 | Korla \n",
      "Processing Record 280 of set 633 | Pilar \n",
      "(Total 35 cities out of 633 not found...) \n",
      "Processing Record 281 of set 633 | Ponca City \n",
      "Processing Record 282 of set 633 | São Filipe \n",
      "Processing Record 283 of set 633 | Rio Grande \n",
      "Processing Record 284 of set 633 | Paamiut \n",
      "Processing Record 285 of set 633 | Morón \n",
      "Processing Record 286 of set 633 | Solwezi \n",
      "Processing Record 287 of set 633 | Alice Springs \n",
      "Processing Record 288 of set 633 | Miracema do Tocantins \n",
      "Processing Record 289 of set 633 | Trelew \n",
      "Processing Record 290 of set 633 | Beloha \n",
      "Processing Record 291 of set 633 | Iqaluit \n",
      "Processing Record 292 of set 633 | Fairlie \n",
      "Processing Record 293 of set 633 | Sertânia \n",
      "Processing Record 294 of set 633 | Mount Gambier \n",
      "Processing Record 295 of set 633 | Muroto-misakicho \n",
      "Processing Record 296 of set 633 | Nautla \n",
      "Processing Record 297 of set 633 | Ketchikan \n",
      "Processing Record 298 of set 633 | Pisco \n",
      "Processing Record 299 of set 633 | Itainópolis \n",
      "Processing Record 300 of set 633 | Marawi \n",
      "Processing Record 301 of set 633 | La Libertad \n",
      "Processing Record 302 of set 633 | Lebu \n",
      "Processing Record 303 of set 633 | Béziers \n",
      "Processing Record 304 of set 633 | Musoma \n",
      "Processing Record 305 of set 633 | Bandarbeyla \n",
      "Processing Record 306 of set 633 | Santa Cruz de la Sierra \n",
      "Processing Record 307 of set 633 | Emerald \n",
      "(Total 36 cities out of 633 not found...) \n",
      "Processing Record 308 of set 633 | Geraldton \n",
      "Processing Record 309 of set 633 | Champerico \n",
      "(Total 37 cities out of 633 not found...) \n",
      "Processing Record 310 of set 633 | Poum \n",
      "Processing Record 311 of set 633 | Lázaro Cárdenas \n",
      "(Total 38 cities out of 633 not found...) \n",
      "Processing Record 312 of set 633 | Oktyabr'skoye \n",
      "Processing Record 313 of set 633 | Dabat \n",
      "Processing Record 314 of set 633 | Bukachacha \n",
      "Processing Record 315 of set 633 | Chitipa \n",
      "Processing Record 316 of set 633 | Hobyo \n",
      "Processing Record 317 of set 633 | Laguna \n",
      "Processing Record 318 of set 633 | Kisanga \n",
      "Processing Record 319 of set 633 | Pokosnoye \n",
      "Processing Record 320 of set 633 | Bengkulu \n",
      "Processing Record 321 of set 633 | Edremit \n",
      "Processing Record 322 of set 633 | Sept-Îles \n",
      "Processing Record 323 of set 633 | Enid \n",
      "Processing Record 324 of set 633 | Carnarvon \n",
      "Processing Record 325 of set 633 | Kadaya \n",
      "Processing Record 326 of set 633 | Koppang \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing Record 327 of set 633 | Mazyr \n",
      "Processing Record 328 of set 633 | Cayenne \n",
      "Processing Record 329 of set 633 | Daru \n",
      "Processing Record 330 of set 633 | Wukari \n",
      "Processing Record 331 of set 633 | Shingū \n",
      "Processing Record 332 of set 633 | San Javier \n",
      "Processing Record 333 of set 633 | Oranjemund \n",
      "Processing Record 334 of set 633 | Sinnamary \n",
      "Processing Record 335 of set 633 | Tateyama \n",
      "Processing Record 336 of set 633 | Panabá \n",
      "Processing Record 337 of set 633 | Seoul \n",
      "Processing Record 338 of set 633 | Gbarnga \n",
      "Processing Record 339 of set 633 | Clyde River \n",
      "Processing Record 340 of set 633 | Dali \n",
      "Processing Record 341 of set 633 | Broome \n",
      "Processing Record 342 of set 633 | Manggar \n",
      "Processing Record 343 of set 633 | Ojinaga \n",
      "Processing Record 344 of set 633 | Hong Kong \n",
      "Processing Record 345 of set 633 | Gornopravdinsk \n",
      "Processing Record 346 of set 633 | Tasiilaq \n",
      "Processing Record 347 of set 633 | Zemio \n",
      "(Total 39 cities out of 633 not found...) \n",
      "Processing Record 348 of set 633 | Wieluń \n",
      "Processing Record 349 of set 633 | Maragogi \n",
      "Processing Record 350 of set 633 | Houma \n",
      "Processing Record 351 of set 633 | Vila \n",
      "Processing Record 352 of set 633 | Salalah \n",
      "Processing Record 353 of set 633 | Périgueux \n",
      "Processing Record 354 of set 633 | Nuevo Progreso \n",
      "Processing Record 355 of set 633 | Sussex \n",
      "Processing Record 356 of set 633 | Pavlovka \n",
      "Processing Record 357 of set 633 | Abadan \n",
      "Processing Record 358 of set 633 | Potosí \n",
      "Processing Record 359 of set 633 | Brigantine \n",
      "Processing Record 360 of set 633 | Man \n",
      "Processing Record 361 of set 633 | Arrondissement de Lons-le-Saunier \n",
      "Processing Record 362 of set 633 | Zyryanka \n",
      "Processing Record 363 of set 633 | Orlik \n",
      "Processing Record 364 of set 633 | Quang Ngai \n",
      "Processing Record 365 of set 633 | Upernavik \n",
      "Processing Record 366 of set 633 | Kamenka \n",
      "Processing Record 367 of set 633 | Kouqian \n",
      "(Total 40 cities out of 633 not found...) \n",
      "Processing Record 368 of set 633 | Honiara \n",
      "(Total 41 cities out of 633 not found...) \n",
      "Processing Record 369 of set 633 | Srīperumbūdūr \n",
      "Processing Record 370 of set 633 | Yumbing \n",
      "Processing Record 371 of set 633 | Kiryat Gat \n",
      "Processing Record 372 of set 633 | Acapulco de Juárez \n",
      "Processing Record 373 of set 633 | Kieta \n",
      "Processing Record 374 of set 633 | Port Macquarie \n",
      "Processing Record 375 of set 633 | Ucluelet \n",
      "Processing Record 376 of set 633 | Alexandria \n",
      "Processing Record 377 of set 633 | Teya \n",
      "Processing Record 378 of set 633 | Tezu \n",
      "Processing Record 379 of set 633 | Coahuayana Viejo \n",
      "Processing Record 380 of set 633 | Laas \n",
      "Processing Record 381 of set 633 | Aksarka \n",
      "Processing Record 382 of set 633 | Yangi Marg`ilon \n",
      "Processing Record 383 of set 633 | West Wendover \n",
      "(Total 42 cities out of 633 not found...) \n",
      "(Total 43 cities out of 633 not found...) \n",
      "Processing Record 384 of set 633 | Bandar-e Anzali \n",
      "Processing Record 385 of set 633 | Panzhihua \n",
      "Processing Record 386 of set 633 | Brønnøysund \n",
      "Processing Record 387 of set 633 | Dawei \n",
      "Processing Record 388 of set 633 | La Baule-Escoublac \n",
      "Processing Record 389 of set 633 | Culpeper \n",
      "Processing Record 390 of set 633 | Ballina \n",
      "Processing Record 391 of set 633 | Ostrovnoy \n",
      "Processing Record 392 of set 633 | Plettenberg Bay \n",
      "Processing Record 393 of set 633 | Nyimba \n",
      "Processing Record 394 of set 633 | Tabou \n",
      "Processing Record 395 of set 633 | Puerto Escondido \n",
      "Processing Record 396 of set 633 | Lucea \n",
      "Processing Record 397 of set 633 | Koulamoutou \n",
      "Processing Record 398 of set 633 | Mount Isa \n",
      "Processing Record 399 of set 633 | Ürümqi \n",
      "Processing Record 400 of set 633 | Weligama \n",
      "Processing Record 401 of set 633 | Sursk \n",
      "Processing Record 402 of set 633 | Kashgar \n",
      "Processing Record 403 of set 633 | Bonfim \n",
      "Processing Record 404 of set 633 | Kailua \n",
      "(Total 44 cities out of 633 not found...) \n",
      "Processing Record 405 of set 633 | Kilindoni \n",
      "Processing Record 406 of set 633 | Marabu \n",
      "(Total 45 cities out of 633 not found...) \n",
      "(Total 46 cities out of 633 not found...) \n",
      "Processing Record 407 of set 633 | Wanning \n",
      "Processing Record 408 of set 633 | Loandjili \n",
      "Processing Record 409 of set 633 | Xai-Xai \n",
      "Processing Record 410 of set 633 | Wagar \n",
      "Processing Record 411 of set 633 | Avera \n",
      "Processing Record 412 of set 633 | Elizabeth City \n",
      "Processing Record 413 of set 633 | Lüderitz \n",
      "Processing Record 414 of set 633 | Antofagasta \n",
      "Processing Record 415 of set 633 | Kapiri Mposhi \n",
      "Processing Record 416 of set 633 | Fallon \n",
      "Processing Record 417 of set 633 | Mayumba \n",
      "Processing Record 418 of set 633 | Sur \n",
      "Processing Record 419 of set 633 | Paita \n",
      "(Total 47 cities out of 633 not found...) \n",
      "Processing Record 420 of set 633 | Yulara \n",
      "Processing Record 421 of set 633 | Mana \n",
      "Processing Record 422 of set 633 | Tautira \n",
      "Processing Record 423 of set 633 | Tarakan \n",
      "Processing Record 424 of set 633 | São João da Barra \n",
      "Processing Record 425 of set 633 | Pulaski \n",
      "Processing Record 426 of set 633 | Clarence Town \n",
      "Processing Record 427 of set 633 | Madang \n",
      "Processing Record 428 of set 633 | Maridi \n",
      "Processing Record 429 of set 633 | Usinsk \n",
      "Processing Record 430 of set 633 | Forest Hills \n",
      "Processing Record 431 of set 633 | Samarai \n",
      "Processing Record 432 of set 633 | Cam Ranh \n",
      "Processing Record 433 of set 633 | Chilca \n",
      "Processing Record 434 of set 633 | Bestöbe \n",
      "Processing Record 435 of set 633 | Jacareacanga \n",
      "Processing Record 436 of set 633 | Erzin \n",
      "(Total 48 cities out of 633 not found...) \n",
      "Processing Record 437 of set 633 | Ust-Maya \n",
      "(Total 49 cities out of 633 not found...) \n",
      "Processing Record 438 of set 633 | Kavaratti \n",
      "Processing Record 439 of set 633 | Lagoa \n",
      "Processing Record 440 of set 633 | Noumea \n",
      "Processing Record 441 of set 633 | Prince Rupert \n",
      "Processing Record 442 of set 633 | Sibolga \n",
      "Processing Record 443 of set 633 | José de Freitas \n",
      "Processing Record 444 of set 633 | Keti Bandar \n",
      "Processing Record 445 of set 633 | Talnakh \n",
      "Processing Record 446 of set 633 | Malakal \n",
      "Processing Record 447 of set 633 | Morros \n",
      "Processing Record 448 of set 633 | Svetlaya \n",
      "Processing Record 449 of set 633 | Esil \n",
      "Processing Record 450 of set 633 | Vogan \n",
      "Processing Record 451 of set 633 | Praia da Vitória \n",
      "Processing Record 452 of set 633 | Ojuelos de Jalisco \n",
      "Processing Record 453 of set 633 | Omsukchan \n",
      "Processing Record 454 of set 633 | Ivanivka \n",
      "Processing Record 455 of set 633 | Zabaykal'sk \n",
      "Processing Record 456 of set 633 | Dovers \n",
      "Processing Record 457 of set 633 | Diplo \n",
      "Processing Record 458 of set 633 | Keminmaa \n",
      "Processing Record 459 of set 633 | Zhengjiatun \n",
      "Processing Record 460 of set 633 | Sos'va \n",
      "(Total 50 cities out of 633 not found...) \n",
      "Processing Record 461 of set 633 | Goderich \n",
      "Processing Record 462 of set 633 | Iquique \n",
      "Processing Record 463 of set 633 | High Level \n",
      "Processing Record 464 of set 633 | San Mateo del Mar \n",
      "Processing Record 465 of set 633 | Pelym \n",
      "Processing Record 466 of set 633 | Opuwo \n",
      "Processing Record 467 of set 633 | Gizo Government Station \n",
      "Processing Record 468 of set 633 | Guapiaçu \n",
      "Processing Record 469 of set 633 | Ulety \n",
      "Processing Record 470 of set 633 | Abaza \n",
      "Processing Record 471 of set 633 | Ajmer \n",
      "Processing Record 472 of set 633 | Kaliua \n",
      "Processing Record 473 of set 633 | Chegdomyn \n",
      "Processing Record 474 of set 633 | Cerrito \n",
      "Processing Record 475 of set 633 | Henties Bay \n",
      "Processing Record 476 of set 633 | Takoradze \n",
      "Processing Record 477 of set 633 | Xining \n",
      "Processing Record 478 of set 633 | Juegang \n",
      "Processing Record 479 of set 633 | Bumbuna \n",
      "Processing Record 480 of set 633 | Omboué \n",
      "Processing Record 481 of set 633 | New Philadelphia \n",
      "Processing Record 482 of set 633 | Bela Vista de Goiás \n",
      "Processing Record 483 of set 633 | Roald \n",
      "Processing Record 484 of set 633 | Huacho \n",
      "(Total 51 cities out of 633 not found...) \n",
      "Processing Record 485 of set 633 | Key West \n",
      "Processing Record 486 of set 633 | Diego de Almagro \n",
      "Processing Record 487 of set 633 | Pochutla \n",
      "Processing Record 488 of set 633 | Pangnirtung \n",
      "(Total 52 cities out of 633 not found...) \n",
      "Processing Record 489 of set 633 | Jalu \n",
      "Processing Record 490 of set 633 | Kazanlak \n",
      "Processing Record 491 of set 633 | Divnomorskoye \n",
      "Processing Record 492 of set 633 | Monte Patria \n",
      "Processing Record 493 of set 633 | Ilhéus \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing Record 494 of set 633 | Inuvik \n",
      "Processing Record 495 of set 633 | Nola \n",
      "Processing Record 496 of set 633 | Sena Madureira \n",
      "Processing Record 497 of set 633 | São José da Coroa Grande \n",
      "Processing Record 498 of set 633 | Belyy Yar \n",
      "Processing Record 499 of set 633 | Rio Verde de Mato Grosso \n",
      "Processing Record 500 of set 633 | Sulangan \n",
      "(Total 53 cities out of 633 not found...) \n",
      "Processing Record 501 of set 633 | Dera Ismail Khan \n",
      "(Total 54 cities out of 633 not found...) \n",
      "Processing Record 502 of set 633 | Shenjiamen \n",
      "Processing Record 503 of set 633 | Jacksonville Beach \n",
      "Processing Record 504 of set 633 | Surin \n",
      "Processing Record 505 of set 633 | Abu Kamal \n",
      "Processing Record 506 of set 633 | Bintulu \n",
      "Processing Record 507 of set 633 | De Aar \n",
      "Processing Record 508 of set 633 | Cavalcante \n",
      "Processing Record 509 of set 633 | Banda Aceh \n",
      "Processing Record 510 of set 633 | Gimbi \n",
      "Processing Record 511 of set 633 | Dawson Creek \n",
      "Processing Record 512 of set 633 | Caravelas \n",
      "Processing Record 513 of set 633 | Kizilskoye \n",
      "Processing Record 514 of set 633 | Vila Velha \n",
      "Processing Record 515 of set 633 | Fengrun \n",
      "(Total 55 cities out of 633 not found...) \n",
      "(Total 56 cities out of 633 not found...) \n",
      "Processing Record 516 of set 633 | Buraidah \n",
      "Processing Record 517 of set 633 | Flinders \n",
      "Processing Record 518 of set 633 | Aktobe \n",
      "Processing Record 519 of set 633 | Eyl \n",
      "Processing Record 520 of set 633 | Parrita \n",
      "Processing Record 521 of set 633 | Nome \n",
      "Processing Record 522 of set 633 | Batagay-Alyta \n",
      "Processing Record 523 of set 633 | Montrose \n",
      "Processing Record 524 of set 633 | Muros \n",
      "(Total 57 cities out of 633 not found...) \n",
      "Processing Record 525 of set 633 | Khagaria \n",
      "(Total 58 cities out of 633 not found...) \n",
      "Processing Record 526 of set 633 | Evensk \n",
      "(Total 59 cities out of 633 not found...) \n",
      "Processing Record 527 of set 633 | Husavik \n",
      "Processing Record 528 of set 633 | Kushmurun \n",
      "Processing Record 529 of set 633 | Pedernales \n",
      "Processing Record 530 of set 633 | Denpasar \n",
      "Processing Record 531 of set 633 | Tommot \n",
      "Processing Record 532 of set 633 | Paraíso \n",
      "Processing Record 533 of set 633 | Krasnotorka \n",
      "Processing Record 534 of set 633 | Doka \n",
      "Processing Record 535 of set 633 | Poquoson \n",
      "Processing Record 536 of set 633 | Hockenheim \n",
      "Processing Record 537 of set 633 | Udachny \n",
      "Processing Record 538 of set 633 | Vestmannaeyjar \n",
      "Processing Record 539 of set 633 | Flin Flon \n",
      "(Total 60 cities out of 633 not found...) \n",
      "Processing Record 540 of set 633 | Ocampo \n",
      "Processing Record 541 of set 633 | Nelson Bay \n",
      "Processing Record 542 of set 633 | Baker City \n",
      "Processing Record 543 of set 633 | Pāvilosta \n",
      "Processing Record 544 of set 633 | Mēga \n",
      "Processing Record 545 of set 633 | Teguise \n",
      "Processing Record 546 of set 633 | Jobat \n",
      "Processing Record 547 of set 633 | Zaraza \n",
      "Processing Record 548 of set 633 | Bilibino \n",
      "Processing Record 549 of set 633 | Rome \n",
      "Processing Record 550 of set 633 | Chhabra \n",
      "Processing Record 551 of set 633 | Saint-Leu \n",
      "Processing Record 552 of set 633 | Lakes Entrance \n",
      "Processing Record 553 of set 633 | Tilichiki \n",
      "Processing Record 554 of set 633 | Kristinehamn \n",
      "Processing Record 555 of set 633 | Zacatepec \n",
      "Processing Record 556 of set 633 | Coari \n",
      "Processing Record 557 of set 633 | Touros \n",
      "Processing Record 558 of set 633 | Khandyga \n",
      "Processing Record 559 of set 633 | Isangel \n",
      "Processing Record 560 of set 633 | Gambēla \n",
      "Processing Record 561 of set 633 | Cabo Rojo \n",
      "Processing Record 562 of set 633 | Koslan \n",
      "Processing Record 563 of set 633 | Sieradz \n",
      "Processing Record 564 of set 633 | Dingle \n",
      "Processing Record 565 of set 633 | Luleå \n",
      "Processing Record 566 of set 633 | Mosjøen \n",
      "Processing Record 567 of set 633 | São Gabriel \n",
      "Processing Record 568 of set 633 | Mpigi \n",
      "Processing Record 569 of set 633 | Belogorsk \n",
      "Processing Record 570 of set 633 | Deputatsky \n",
      "Processing Record 571 of set 633 | Balakhninskiy \n",
      "Processing Record 572 of set 633 | Kutum \n",
      "Processing Record 573 of set 633 | Chantada \n",
      "\n",
      "-------------------------------------------\n",
      "Data Retrieval Completed\n",
      "-------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "unit = \"Imperial\"\n",
    "\n",
    "#api_key = \"enter api key to execute\"\n",
    "\n",
    "base_url = f\"http://api.openweathermap.org/data/2.5/weather?\"\n",
    "param = {\"appid\" : weather_api_key,\n",
    "         \"units\" : unit}\n",
    "\n",
    "# Create DataFrame with below parameters\n",
    "city_weather_df = pd.DataFrame(columns=[\"City\",\n",
    "                                        \"Cloudiness(%)\",\n",
    "                                        \"Country\",\n",
    "                                        \"Date\",\n",
    "                                        \"Humidity(%)\",\n",
    "                                        \"Lat\",\n",
    "                                        \"Lng\", \n",
    "                                        \"Max Temp(F)\",\n",
    "                                        \"Wind Speed(mph)\"])\n",
    "\n",
    "# get local current time\n",
    "def current_date():\n",
    "    localtime = time.asctime( time.localtime(time.time()) )\n",
    "    return localtime.split(' ')[1]+\"/\"+localtime.split(' ')[2]+\"/\"+localtime.split(' ')[4]\n",
    "\n",
    "\n",
    "print(\"Beginning Data Retrieval\")\n",
    "print(\"-----------------------------------\")\n",
    "\n",
    "\n",
    "# store each city weather information on DataFrame\n",
    "i = 0\n",
    "not_found = 0\n",
    "for city in cities:\n",
    "    param[\"q\"] = city\n",
    "    \n",
    "    # Perform a weather check on each of the cities using a series of successive API calls    \n",
    "    data = requests.get(base_url, params=param).json()\n",
    "    try:\n",
    "        city_weather_df.loc[i, \"City\"] = data[\"name\"]\n",
    "        city_weather_df.loc[i, \"Cloudiness(%)\"] = data[\"clouds\"][\"all\"]\n",
    "        city_weather_df.loc[i, \"Country\"] = data[\"sys\"][\"country\"]\n",
    "        city_weather_df.loc[i, \"Date\"] = current_date()\n",
    "        city_weather_df.loc[i, \"Humidity(%)\"] = data[\"main\"][\"humidity\"]\n",
    "        city_weather_df.loc[i, \"Lat\"] = data[\"coord\"][\"lat\"]\n",
    "        city_weather_df.loc[i, \"Lng\"] = data[\"coord\"][\"lon\"]\n",
    "        city_weather_df.loc[i, \"Max Temp(F)\"] = data[\"main\"][\"temp_max\"]\n",
    "        city_weather_df.loc[i, \"Wind Speed(mph)\"] = data[\"wind\"][\"speed\"]\n",
    "        \n",
    "        i += 1\n",
    "        # Include a print log of each city as it's being processed with the city number and city name.\n",
    "        print(\"Processing Record {:3d} of set {} | {} \".format(i, len(cities), data['name']))\n",
    "              \n",
    "    except KeyError:\n",
    "        print(\"(Total {} cities out of {} not found...) \".format(not_found + 1, len(cities)))\n",
    "        not_found += 1\n",
    "\n",
    "print(f\"\"\"\n",
    "-------------------------------------------\n",
    "Data Retrieval Completed\n",
    "-------------------------------------------\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert Raw Data to DataFrame\n",
    "* Export the city data into a .csv.\n",
    "* Display the DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Save CSV of all data retrieved\n",
    "city_weather_df.to_csv(output_data_file)\n",
    "city_weather_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Cloudiness(%)</th>\n",
       "      <th>Country</th>\n",
       "      <th>Date</th>\n",
       "      <th>Humidity(%)</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lng</th>\n",
       "      <th>Max Temp(F)</th>\n",
       "      <th>Wind Speed(mph)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Pathalgaon</td>\n",
       "      <td>98</td>\n",
       "      <td>IN</td>\n",
       "      <td>Jun/19/2020</td>\n",
       "      <td>51</td>\n",
       "      <td>22.57</td>\n",
       "      <td>83.47</td>\n",
       "      <td>86.72</td>\n",
       "      <td>8.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Savannah Bight</td>\n",
       "      <td>90</td>\n",
       "      <td>HN</td>\n",
       "      <td>Jun/19/2020</td>\n",
       "      <td>72</td>\n",
       "      <td>16.45</td>\n",
       "      <td>-85.85</td>\n",
       "      <td>83.03</td>\n",
       "      <td>22.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Avarua</td>\n",
       "      <td>24</td>\n",
       "      <td>CK</td>\n",
       "      <td>Jun/19/2020</td>\n",
       "      <td>68</td>\n",
       "      <td>-21.21</td>\n",
       "      <td>-159.78</td>\n",
       "      <td>71.6</td>\n",
       "      <td>10.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Puerto Ayora</td>\n",
       "      <td>99</td>\n",
       "      <td>EC</td>\n",
       "      <td>Jun/19/2020</td>\n",
       "      <td>89</td>\n",
       "      <td>-0.74</td>\n",
       "      <td>-90.35</td>\n",
       "      <td>71.01</td>\n",
       "      <td>1.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Punta Arenas</td>\n",
       "      <td>72</td>\n",
       "      <td>CL</td>\n",
       "      <td>Jun/19/2020</td>\n",
       "      <td>93</td>\n",
       "      <td>-53.15</td>\n",
       "      <td>-70.92</td>\n",
       "      <td>37.4</td>\n",
       "      <td>3.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             City Cloudiness(%) Country         Date Humidity(%)    Lat  \\\n",
       "0      Pathalgaon            98      IN  Jun/19/2020          51  22.57   \n",
       "1  Savannah Bight            90      HN  Jun/19/2020          72  16.45   \n",
       "2          Avarua            24      CK  Jun/19/2020          68 -21.21   \n",
       "3    Puerto Ayora            99      EC  Jun/19/2020          89  -0.74   \n",
       "4    Punta Arenas            72      CL  Jun/19/2020          93 -53.15   \n",
       "\n",
       "      Lng Max Temp(F) Wind Speed(mph)  \n",
       "0   83.47       86.72            8.95  \n",
       "1  -85.85       83.03           22.93  \n",
       "2 -159.78        71.6           10.29  \n",
       "3  -90.35       71.01            1.99  \n",
       "4  -70.92        37.4            3.36  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display dataframe\n",
    "city_weather_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the Data"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "font = 12\n",
    "lat = city_weather_df['Lat']\n",
    "max_temp = city_weather_df['Max Temp(F)']\n",
    "date = city_weather_df['Date'][0]\n",
    "\n",
    "# Print analysis\n",
    "print (\"Minimum Temprature is {:.2f}\" .format(max_temp.min()))\n",
    "print (\"Average Temprature is {:.2f}\" .format(max_temp.mean()))\n",
    "print (\"Maximun Temprature is {:.2f}\" .format (max_temp.max()))  \n",
    "print (\"Their are {} cities temprature are greater than 100 degree (F) \\n\" .format (city_weather_df[city_weather_df['Max Temp(F)']> 100].count()['City']))\n",
    " \n",
    "\n",
    "\n",
    "plt.grid(True)\n",
    "# create scatter plot for city latitude with max temprature\n",
    "plt.scatter(lat, max_temp, marker=\"o\", facecolors=\"lightblue\", edgecolors=\"black\")\n",
    "# set x axis label\n",
    "plt.xlabel(\"Latitude\", fontsize = font)\n",
    "# set y axis label\n",
    "plt.ylabel(\"Max Temperature (F)\", fontsize = font)\n",
    "# set chart title \n",
    "plt.title(f\"City Latitude vs. Max Temparature ({date})\\n\", fontsize = font)\n",
    "#  save png images to output folder\n",
    "plt.savefig(\"outputdata/max_temp.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Latitude vs. Temperature Plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Latitude vs. Humidity Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum Humidity 100.00 %\n",
      "Minimum Humidity 3.00 %\n",
      "Average Humidity 67.62 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font = 12\n",
    "lat = city_weather_df['Lat']\n",
    "humidity = city_weather_df['Humidity(%)']\n",
    "date = city_weather_df['Date'][1]\n",
    "\n",
    "# Print analysis\n",
    "print (\"Maximum Humidity {:.2f} %\".format(humidity.max()))\n",
    "print (\"Minimum Humidity {:.2f} %\".format(humidity.min()))\n",
    "print (\"Average Humidity {:.2f} %\".format(humidity.mean()))\n",
    "\n",
    "plt.grid(True)\n",
    "# create scatter plot for humidity by city latitude\n",
    "plt.scatter(lat, humidity, marker=\"o\", facecolors=\"lightblue\", edgecolors=\"black\")\n",
    "# set x axis label\n",
    "plt.xlabel(\"Latitude\", fontsize = font)\n",
    "# set y axis label\n",
    "plt.ylabel(\"Humidity (%)\", fontsize = font)\n",
    "# set chart title \n",
    "plt.title(f\"City Latitude vs. Humidity (%) ({date})\\n\", fontsize = font)\n",
    "#  save png images to output folder\n",
    "plt.savefig(\"outputdata/lat_humidity.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This scatterplot is comparing a city's latitude to the Humidity percentage. From the scatterplot, you can determine that from latitudes 0 to 20, the humidity percentage is concentrated between 40 and 80 percent. You can also see that there is a concentration of extremely high humidity percentages at latitudes 40 to 80,0, and from -20 to -40. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Latitude vs. Cloudiness Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font = 12\n",
    "lat = city_weather_df['Lat']\n",
    "cloudiness = city_weather_df['Cloudiness(%)']\n",
    "date = city_weather_df['Date'][1]\n",
    "\n",
    "plt.grid(True)\n",
    "# create scatter plot for cloudiness by city latitude\n",
    "plt.scatter(lat, cloudiness, marker=\"o\", facecolors=\"yellow\", edgecolors=\"black\")\n",
    "# set x axis label\n",
    "plt.xlabel(\"Latitude\", fontsize = font)\n",
    "# set y axis label\n",
    "plt.ylabel(\"Cloudiness (%)\", fontsize = font)\n",
    "# set chart title \n",
    "plt.title(f\"City Latitude vs. Cloudiness (%) ({date})\\n\", fontsize = font)\n",
    "#  save png images to output folder\n",
    "plt.savefig(\"outputdata/lat_cloudiness.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This scatterplot is comparing a city's latitude to the percentage of cloudiness. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Latitude vs. Wind Speed Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font = 12\n",
    "lat = city_weather_df['Lat']\n",
    "wind_speed = city_weather_df['Wind Speed(mph)']\n",
    "date = city_weather_df['Date'][1]\n",
    "\n",
    "plt.grid(True)\n",
    "# create scatter plot for wind speed mph by city latitude\n",
    "plt.scatter(lat, wind_speed, marker=\"o\", facecolors=\"red\", edgecolors=\"black\")\n",
    "# set x axis label\n",
    "plt.xlabel(\"Latitude\", fontsize = font)\n",
    "# set y axis label\n",
    "plt.ylabel(\"Wind Speed (mph)\", fontsize = font)\n",
    "# set chart title \n",
    "plt.title(f\"City Latitude vs. Wind Speed ({date})\\n\", fontsize = font)\n",
    "#  save png images to output folder\n",
    "plt.savefig(\"outputdata/lat_wind_speed.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This scatterplot is observing the Wind Speed in relation to the city latitude. From the scatterplot, you can tell that there is a high concentration of lower wind speeds from latitudes -20 to 20. It also shows that wind speeds that range from 15 mph to 35 mph occurs more likely in latitudes that range from -20 to -40 and 20 to 60. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "nteract": {
   "version": "0.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
